я буду рассказывать о фреймворка как таковом, будут часто используемые вещи и не очень, то что лежит на поверхности и тонкости, в идеале я хотел бы рассказать все что знаю и умею сам

я уверен что все узнают о js что-то новое, даже не столько об API, но и о самом подходе к программированию на этом языке

в ng есть множество функций типа copy, element, forEach, как и в extjs, но есть удобная библиотека для работы со всей функциональщиной - underscore или lodash, которая, я предпочитаю ее

digest cycle это цикл оповещения watcher'ов об изменениях случившихся в модели scope
watcher это функция привязанная к изменению какой-либо переменной в модели

1. ng-model
ng-model это самая удобная директива в ng - она связывает какой-либо контрол с бэкэнд моделью и обеспечивает 2-way binding между html представлением и js моделью
ng-model следит за значением контрола по ссылке, а значит объекты такие как Date будут апдейтиться а не создаваться заного
ng-model следить не только за значением но и за стейтом контрола - valid/invalid, dirty/pristine, touched/untouched - стейт может быть использован для валидации, стилей и анимации
например если на "свежий" input type="text" нажать а потом убрать фокус то его класс ng-untouched сменится на ng-touched а если ввести символ то ng-pristine -> ng-dirty
это очень user-friendly для форм, несколько простых css правил сделают обычную html форму гораздо приятнее
по дефолту ng-model тип будет string, для checkbox - boolean

2. ng-click, show/Hide
не обязательно связывать какой-либо инпут с моделью для того чтобы создавать переменные в скоупе, достаточно просто как-либо создать переменную чтобы ее использовать
ng-show действует как if(variable) {...} если переменной нет то она undefined -> false
есть всякие ng-copy, ng-cut, ng-change и другие ng-* которые реагируют на события и вызывают какой-то соотв. код для обработки

очень удобная тулза для ng - batarang, можно видеть изменение стейта прямо в консоли и даже изменять стейт (в каких-то пределах)

ng-click принимает только валидный ng expression, причем можно писать сразу несколько выражений через ; при этом те что не валидные будут проигнорированы (console.log.awef.awef.ef('awef')) а валидные выполнятся (даже если они после невалидного)

scope есть некий source of truth - но иногда бывает так что мы сетаем scope.var1, но watchers не оповещены и юай не поменялся - в этом случае поможет $apply
