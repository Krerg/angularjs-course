я буду рассказывать о фреймворка как таковом, будут часто используемые вещи и не очень, то что лежит на поверхности и тонкости, в идеале я хотел бы рассказать все что знаю и умею сам

я уверен что все узнают о js что-то новое, даже не столько об API, но и о самом подходе к программированию на этом языке

в ng есть множество функций типа copy, element, forEach, как и в extjs, но есть удобная библиотека для работы со всей функциональщиной - underscore или lodash, которая, я предпочитаю ее
для тех кто плохо знает vanillajs я буду говорить что есть ng-специфические функции, а что - стандартные

digest cycle это цикл оповещения watcher'ов об изменениях случившихся в модели scope
watcher это функция привязанная к изменению какой-либо переменной в модели

фреймворк должен давать программисту удобный способ делать привычные задачи либо вывести решение этих задач на новый уровень\
бывает так что во фреймворке чего-то нет - не страшно, если это можно сделать другим способом, важно понимать что любой фреймворк сделан в первую очередь для удобства
конечно очень жаль что какой-нибудь функции нет, но не стоит расстраиваться, можно написать ее самому, отсутсвие не говорит о том что фреймворк кривой, просто создатели учли не все возможные варианты, не все типичные ситуации и востребованные решения

1. ng-model
ng-model это самая удобная директива в ng - она связывает какой-либо контрол с бэкэнд моделью и обеспечивает 2-way binding между html представлением и js моделью
ng-model следит за значением контрола по ссылке, а значит объекты такие как Date будут апдейтиться а не создаваться заного
ng-model следить не только за значением но и за стейтом контрола - valid/invalid, dirty/pristine, touched/untouched - стейт может быть использован для валидации, стилей и анимации
например если на "свежий" input type="text" нажать а потом убрать фокус то его класс ng-untouched сменится на ng-touched а если ввести символ то ng-pristine -> ng-dirty
это очень user-friendly для форм, несколько простых css правил сделают обычную html форму гораздо приятнее
по дефолту ng-model тип будет string, для checkbox - boolean

2. ng-click, show/Hide
не обязательно связывать какой-либо инпут с моделью для того чтобы создавать переменные в скоупе, достаточно просто как-либо создать переменную чтобы ее использовать
ng-show действует как if(variable) {...} если переменной нет то она undefined -> false
есть всякие ng-copy, ng-cut, ng-change и другие ng-* которые реагируют на события и вызывают какой-то соотв. код для обработки

очень удобная тулза для ng - batarang, можно видеть изменение стейта прямо в консоли и даже изменять стейт (в каких-то пределах)

ng-click принимает только валидный ng expression, причем можно писать сразу несколько выражений через ; при этом те что не валидные будут проигнорированы (console.log.awef.awef.ef('awef')) а валидные выполнятся (даже если они после невалидного)

scope есть некий source of truth - но иногда бывает так что мы сетаем scope.var1, но watchers не оповещены и юай не поменялся - в этом случае поможет $apply

ADT:
в ng нет встроенных стилей как в extjs, все нужно делать руками - в этом минус но и плюс - весь контроль в руках программиста
вообще тулзы типа jsf, gwt и прочие которые абстрагируются от css, html и js мне кажется тень былого века, сейчас принято разделять все эти вещи

после написания каркаса нужно придумать механизм загрузки плагинов - существует множество способов загрузить какой-либо контент средствами браузера, воспользуемся встроенным сервисом angular $templateRequest
загруженный темплейт надо вставить в то место где мы хотим плагин - #plugin_content, а для того чтобы темплейт стал валидным ng-кодом мы вызовем сервис $compile, иначе вставится просто текст
конечно плагинам потребуются скрипты, можно написать загрузчик, но не будет это делать сейчас - просто подключим все необходимые скрипты в index.html; единственное что потребуется - динамически зарегестрировать контроллеры используя controllerProvider (который не является сервисом, но на него можно получить ссылку в конфиге)
т.о. мы написали загрузчик плагинов! давайте напишем как бы выглядел юзерменеджер - хороший пример CRUD операций на ng
чтобы удалить юзера deleteUser мы передаем $index - у каждого элемента списка он есть; задать его можно с помощью track by; если сделать ng-repeat="user in users track by user.id" когда айди одинаковые будет ошибка
form > input.ng-touched.ng-invalid задаст стиль только когда мы уберем с него фокус
novalidate добавляют чтобы отключить дефолтную валидацию браузера
если дать форме имя name="form" то сработает директива которая создаст объект form в текущем скоупе - у form есть куча полезных проперти
